Authors: Ali Ebadi Torkayesh, Murat Elh√ºseyni

Requirements: Licensed Gurobi Key, Python Environment, Installed gurobipy, numpy, 
pandas, itertools, time packages in the Python Environment


Input File: Case Parameters (includes costs,  power demands, bid sets, 
maximum production capacities and maximum flow allowed in the transmission lines), 
(Example Case Input File: Small_2.xlsx)

Line 19: n is the number of node in the network

Line 21: show the generator nodes

Line 29-30: Input and output files

Line 34-39: Reads different sheets of the input excel

Line 41: KKK is a counter which will be used in the case generation part.

Line 42-43: Two set are defined for fmax and pmax parameters for case generation part.

Line 44: Shows the search iteration to find the selected number of cases

Line 45: Shows the number of cases that we want to find. 

Line 46-93: DCOPF Problem

Line 94-125: Nash 

Line 126- 135: Collusive finder

Line 136: Case Generation based on new fmax and pmax values (other parameters are fixed)

A while loop is defined to find the selected "Number" of the cases that we want to find. 
In each iteration, dgg is zeros matrix which is later used for dg (fmax values). For fmax values bigger than 0, random values are generated by giving our desired numerical range. Later, the matrix is turned to a symetric matrix. 

In line 153, the same process starts for the pmax values. A zeros matrix is created and for pmax
values of generator nodes, random values are generated in each iteration. 

The rest of the code is similar to the total enumeration code where bids are generated and tested in order to check whether the 
generated case with new pmax and fmax values have any collusive states.


Output File: output file contains new pmax values, fmax values, number of nash and collusive states, 
nash and collusive states which are shown in the variable explorer and can also be written in a CSV file. 
